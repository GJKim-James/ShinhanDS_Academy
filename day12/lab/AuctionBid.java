package com.shinhan.day12.lab;

import java.util.Arrays;

/*
 * 1~n번의 서로 다른 번호를 가진 경매 물품 n개와 1~m번의 서로 다른 번호를 가진 경매 참가자 m명이 있습니다.
 * 참가자 m명은 각자 자신의 자본을 가지고 경매에 참가합니다.
 * 
 * 경매는 1번부터 n번 물품에 대하여 물품 번호가 낮은 순으로 차례대로 진행됩니다.
 * 각 경매는 0원부터 시작하며, 입찰 단위는 10,000원입니다.
 * 각 경매가 진행될 때마다 참가자들은 남은 자본을 모두 투자해서라도 해당 물품을 낙찰받고 싶어합니다.
 * 그러므로 항상 자본이 가장 많이 남은 참가자가 물품을 낙찰받게 됩니다.
 * 자본이 가장 많이 남은 참가자가 여러 명이라면, 번호가 가장 낮은 참가자가 물품을 낙찰받게 됩니다.
 * 따라서 모든 경매 물품은 다음과 같이 낙찰됩니다.
 * 
 * 자본이 가장 많이 남은 참가자가 1명인 경우:
 *   자본이 가장 많이 남은 참가자가 두 번째로 자본이 많이 남은 참가자의 자본 + 10,000원을 지불하고
 *   물품을 낙찰받습니다.
 * 자본이 가장 많이 남은 참가자가 2명인 경우:
 *   자본이 가장 많이 남은 참가자 중 번호가 가장 낮은 참가자가 자신의 남은 자본을 모두 지불하고 물품을 낙찰받습니다.
 * 
 * 참가자의 자본이 모두 0원 남았을 때 경매의 낙찰 금액은 0원입니다.
 * 
 * 다음은 경매 물품이 4개 있고, 4명의 참가자가 있을 때의 예시입니다.
 * 물품 번호	1번 참가자의 자본	2번 참가자의 자본	3번 참가자의 자본	4번 참가자의 자본	경매 결과
 * 1		1,000,000		490,000			700,000			290,000			1번 참가자가 710,000원에 1번 물품을 낙찰받습니다.
 * 2		290,000			490,000			700,000			290,000			3번 참가자가 500,000원에 2번 물품을 낙찰받습니다.
 * 3		290,000			490,000			200,000			290,000			2번 참가자가 300,000원에 3번 물품을 낙찰받습니다.
 * 4		290,000			190,000			200,000			290,000			1번 참가자가 290,000원에 4번 물품을 낙찰받습니다.
 * 			0				190,000			200,000			290,000			경매가 끝난 후 각 참가자의 남은 자본입니다.
 * 
 * 경매 물품의 수를 나타내는 정수 n과 참가자 m명의 초기 자본을 담은 1차원 정수 배열 amounts가 매개변수로 주어집니다.
 * 이 때 물품 번호가 낮은 순으로 낙찰된 금액을 길이가 n인 1차원 정수 배열에 담아 return 하도록 solution 함수를 완성해주세요.
 * 
 * 제한사항
 * 1 <= n <= 100
 * 2 <= amounts 길이 = m <= 100
 * 0 <= amounts 원소 <= 1,000,000,000
 *   amounts[i]는 i + 1번 참가자의 초기 자본을 의미
 *   amounts 원소는 10,000의 배수인 정수
 */

// 경매 낙찰 금액
public class AuctionBid {

	public static void main(String[] args) {
		
		// testcast 2개로 TEST
		int[] n = { 4, 6 }; // 물품갯수
		int[][] amounts = { { 1000000, 490000, 700000, 290000 }, { 30000, 70000, 10000 } };// 참가자들의 자본
		
		AuctionBid ex = new AuctionBid();

		for (int i = 0; i < n.length; i++) {
			System.out.println("========== testcase " + i + "번째 ==========");
			int[] result = ex.solution(n[i], amounts[i]);
			System.out.println(Arrays.toString(result));
		}
		
	}

	private int[] solution(int n, int[] amounts) {
		
		
		
		// 박은지 님 코드
		// n : 물품 개수, m : 참가자 수, amounts : 초기 자본
		int m = amounts.length;
		int[] result = new int[n];
		int[][] person = new int[m][2];

		// 참가자 번호부여
		for (int i = 0; i < m; i++) {
			person[i][0] = i + 1;
			person[i][1] = amounts[i];
		}

		for (int i = 0; i < n; i++) {
			// 자본 많은순, 자본 같으면 번호순
			Arrays.sort(person, (a, b) -> b[1] - a[1] == 0 ? a[0] - b[0] : b[1] - a[1]);

			for (int j = 0; j < m; j++) {
				if (person[j][1] > person[j + 1][1]) {
					person[j][1] -= person[j + 1][1] + 10000;
					result[i] = person[j + 1][1] + 10000;
					break;
				}
				else if(person[j][1] == person[j+1][1]) {
					result[i] = person[j][1];
					person[j][1] = 0;
					break;
				}
			}
		}

		return result;
	}

}
